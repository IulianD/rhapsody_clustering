#dssSubset('kmeans_M', 'kmeans_by_sex$M', row.filter = '1==1', async = FALSE, datasources = opals[this.cohort])
#dssSubset('kmeans_F', 'kmeans_by_sex$F', row.filter = '1==1', async = FALSE, datasources = opals[this.cohort])
vars <- sapply(ds.colnames('kmeans_input', datasources = opals[this.cohort])[[this.cohort]], function(x){
this.col <- paste0('kmeans_input$',x)
ds.var(this.col, datasources = opals[this.cohort])
}, simplify = FALSE)
fivesds <- sapply(vars, function(x){
5*sqrt(x$Variance.by.Study[1,1])
#x$Variance.by.Study[1,1]
}, simplify = FALSE) %>% unlist
colm <- dssColMeans('kmeans_input', datasources = opals[this.cohort])[[this.cohort]]$means
names(fivesds) <- names(colm)
sapply(names(colm), function(x){
maxx <- colm[x] + fivesds[x]
minx <- colm[x] - fivesds[x]
my.filter <- paste0(x, ' > ', minx, ' & ', x, ' < ', maxx)
dssSubset('kmeans_input', 'kmeans_input', row.filter = my.filter, async = FALSE, datasources = opals[this.cohort])
})
}
prepare_cluster_andis <-  function(with.hdl = TRUE){
this.cohort <- c('andis')
rowfilter_andis <- "((LBTESTCD=='HBA1C' & LBORRESU=='mmol/mol') | (LBTESTCD== 'CPEP' ) | LBTESTCD == 'HDL')  & (VISIT %in% c('DIAGNOSIS', 'RECRUITMENT') ) "
dssSubset('lb2', 'lb', row.filter = rowfilter_andis, async = FALSE, datasources = opals[this.cohort] )
#LB2
lb_with_visit = c('CPEP', 'HBA1C')
if(with.hdl){
lb_with_visit = c(lb_with_visit, 'HDL')
}
for (m in lb_with_visit){
pre <- paste0('pre_', m)
by_visit <- paste0('by_visit_', m)
row_filter <- paste0("LBTESTCD ==  '", m, "' & !is.na(LBORRES)")
dssSubset(pre, 'lb2', row.filter = row_filter , col.filter = "c('SUBJID', 'LBORRES', 'VISIT')", async = FALSE, datasources = opals[this.cohort])
dssSubsetByClass(pre, by_visit, variables = paste0(pre, '$VISIT'), keep.cols = c('SUBJID', 'LBORRES'), async = FALSE, datasources = opals[this.cohort])
#keep most from diagnosis, only supplementary ones from recruitment
rec <- paste0('rec_', m)
row_fil <- paste0('!(SUBJID %in% ', by_visit, '$DIAGNOSIS$SUBJID)')
dssSubset( rec, paste0(by_visit, '$RECRUITMENT'), row.filter = row_fil, async = FALSE, datasources = opals[this.cohort])
final <- paste0('lb_',m)
dssRbind(final, paste0(by_visit, '$DIAGNOSIS'), rec, async = FALSE, datasources = opals[this.cohort] )
dssColNames(final, value = c('SUBJID', m), async = FALSE, datasources = opals[this.cohort])
}
# grab HDL and HBA1C without visit information
lb_without_visit = c('HBA1C')
if(with.hdl){
lb_without_visit =c('HBA1C', 'HDL')
}
for (m in lb_without_visit){
novisit <- paste0('no_visit_', m)
final <- paste0('lb_',m)
row_filter <- paste0(" LBTESTCD == '", m ,"' & !is.na(LBORRES) & !(SUBJID %in% ", final, "$SUBJID)")
dssSubset(novisit, 'lb', row.filter = row_filter, col.filter = "c('SUBJID', 'LBORRES', 'LBDTC')", async = FALSE, datasources = opals[this.cohort] )
ordered_name <- paste0('ordered_',m)
dssSubset(ordered_name, novisit, row.filter = 'ordered(SUBJID)', async = FALSE, datasources = opals[this.cohort])
row_filter_block <- paste0('{
Reduce(c,lapply(unique(SUBJID), function(my_id){
my_dates <- ', ordered_name,  '[', ordered_name, '$SUBJID == my_id, "LBDTC"];
my_dates <- as.Date(as.vector(my_dates));
diag_date <- lb[lb$SUBJID == my_id & lb$VISIT == "DIAGNOSIS" & lb$LBTESTCD == "',m,'", "LBDTC"];
diag_date <- as.Date(as.vector(diag_date));
if(length(diag_date) == 0 || is.na(diag_date)){
#keep the first date
out <- c(TRUE, rep(FALSE, length(my_dates) - 1))
} else {
out <- (my_dates == my_dates[which.min(abs(my_dates - diag_date))]);
#if we have only FALSE and NA, make the first NA TRUE:
#if(any(is.na(out)) && all(out[!is.na(out)] == FALSE)){
#    true_index <- which(is.na(out))[1];
#    out <- rep(FALSE, length(out));
#    out[true_index] <- TRUE;
#}
}
out
}))
}')
#cat(row_filter_block)
#dssSubset(ordered_name, ordered_name, row.filter = row_filter_block, col.filter = "c('SUBJID', 'LBORRES')",async = FALSE, datasources = opals[this.cohort])
dssSubset(ordered_name, ordered_name, row.filter = '!duplicated(SUBJID)',col.filter = "c('SUBJID', 'LBORRES')", async = FALSE, datasources = opals[this.cohort])
dssColNames(ordered_name, value = c('SUBJID', m), async = FALSE, datasources = opals[this.cohort])
dssRbind(ordered_name, final, ordered_name, async = FALSE, datasources = opals[this.cohort])
}
join_input <- c('ordered_HBA1C', 'lb_CPEP')
if(with.hdl){
join_input <- c(join_input, 'ordered_HDL')
}
dssJoin(join_input, symbol = 'comp_lb', by = 'SUBJID', join.type = 'inner' , async = FALSE, datasources = opals[this.cohort])
#VS
dssSubset('comp_vs', 'vs', row.filter = "VSTESTCD == 'BMI' & (SUBJID %in% comp_lb$SUBJID) & !is.na(VSORRES)" , col.filter = "c('SUBJID', 'VSORRES')", async = FALSE, datasources = opals[this.cohort])
dssColNames('comp_vs', value = c('SUBJID', 'BMI'), async = FALSE, datasources = opals[this.cohort])
#DM
dssSubset('comp_dm', 'dm',  col.filter = "c('SUBJID', 'AGE', 'SEX')", async = FALSE, datasources = opals[this.cohort])
dssSubset('comp_dm', 'comp_dm', row.filter = '!is.na(AGE)  & (SUBJID %in% comp_vs$SUBJID)', async = FALSE, datasources = opals[this.cohort])
#join
dssJoin(c('comp_lb', 'comp_vs', 'comp_dm'), 'join_all', by = 'SUBJID', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
if(with.hdl){
output_cols <- 'c("AGE", "BMI", "CPEP", "HBA1C", "HDL")'
} else {
output_cols <- 'c("AGE", "BMI", "CPEP", "HBA1C")'
}
dssSubset('kmeans_input', 'join_all', col.filter = output_cols, async = FALSE, datasources = opals[this.cohort])
#dssSubsetByClass('join_all', subsets = 'kmeans_by_sex', variables = 'join_all$SEX', keep.cols = eval(parse(text = output_cols)), async = FALSE, datasources = opals[this.cohort])
#dssSubset('kmeans_M', 'kmeans_by_sex$M', row.filter = '1==1', async = FALSE, datasources = opals[this.cohort])
#dssSubset('kmeans_F', 'kmeans_by_sex$F', row.filter = '1==1', async = FALSE, datasources = opals[this.cohort])
vars <- sapply(ds.colnames('kmeans_input', datasources = opals[this.cohort])[[this.cohort]], function(x){
this.col <- paste0('kmeans_input$',x)
ds.var(this.col, datasources = opals[this.cohort])
}, simplify = FALSE)
fivesds <- sapply(vars, function(x){
5*sqrt(x$Variance.by.Study[1,1])
#x$Variance.by.Study[1,1]
}, simplify = FALSE) %>% unlist
colm <- dssColMeans('kmeans_input', datasources = opals[this.cohort])[[this.cohort]]$means
names(fivesds) <- names(colm)
sapply(names(colm), function(x){
maxx <- colm[x] + fivesds[x]
minx <- colm[x] - fivesds[x]
my.filter <- paste0(x, ' > ', minx, ' & ', x, ' < ', maxx)
dssSubset('kmeans_input', 'kmeans_input', row.filter = my.filter, async = FALSE, datasources = opals[this.cohort])
})
}
prepare_cluster_andis(with.hdl = TRUE)
ds.summary('kmeans_input')
datashield.logout(opals)
cohorts <- c(  'dcs')
logindata <- read.delim('logindata_DSOpal.txt')
logindata <- logindata[logindata$server %in% cohorts,,drop=FALSE]
opals <- datashield.login(logindata)
datashield.assign(opals, 'lb', 'rhapsody.LB')
datashield.assign(opals, 'vs', 'rhapsody.VS')
datashield.assign(opals, 'dm', 'rhapsody.DM')
#datashield.assign(opals, 'lb', as.symbol('convert.units("lb")'))
#datashield.assign(opals[c('dcs', 'godarts')],'mh', 'rhapsody.MH')
datashield.assign(opals,'mh', 'rhapsody.MH')
prepare_cluster_dcs(with.hdl = TRUE)
vars <- sapply(ds.colnames('kmeans_input', datasources = opals[this.cohort])[[this.cohort]], function(x){
this.col <- paste0('kmeans_input$',x)
ds.var(this.col, datasources = opals[this.cohort])
}, simplify = FALSE)
this.cohort = 'dcs'
vars <- sapply(ds.colnames('kmeans_input', datasources = opals[this.cohort])[[this.cohort]], function(x){
this.col <- paste0('kmeans_input$',x)
ds.var(this.col, datasources = opals[this.cohort])
}, simplify = FALSE)
vars
vars <- sapply(ds.colnames('kmeans_input', datasources = opals[this.cohort])[[this.cohort]], function(x){
this.col <- paste0('kmeans_input$',x)
ds.var(this.col, datasources = opals[this.cohort])
}, simplify = FALSE)
vars
fivesds <- sapply(vars, function(x){
5*sqrt(x$Variance.by.Study[1,1])
#x$Variance.by.Study[1,1]
}, simplify = FALSE) %>% unlist
fivesds
source('/media/sf_shareddisk/Rhapsody/new_article_clustering/cluster_functions.R')
prepare_cluster_dcs(with.hdl = TRUE)
pkgload::load_all('/media/sf_shareddisk/datashield/dsSwissKnifeClient')
pkgload::load_all('/media/sf_shareddisk/datashield/dsHelpersClient')
library(dsBaseClient)
library(magrittr)
library(reshape2)
library(ggplot2)
library(scales)
logindata <- read.delim('logindata_DSOpal.txt')
cohorts <- c(  'accelerate')
logindata <- logindata[logindata$server %in% cohorts,,drop=FALSE]
opals <- datashield.login(logindata)
#datashield.aggregate(opals, quote(set.stringsAsFactors(TRUE)))
datashield.assign(opals, 'lb', 'rhapsody.LB')
datashield.assign(opals, 'vs', 'rhapsody.VS')
datashield.assign(opals, 'dm', 'rhapsody.DM')
#datashield.assign(opals, 'lb', as.symbol('convert.units("lb")'))
#datashield.assign(opals[c('dcs', 'godarts')],'mh', 'rhapsody.MH')
datashield.assign(opals,'mh', 'rhapsody.MH')
datashield.errors()
opal.tables(opals[[1]], 'rhapsody')
opal.tables(opals[1], 'rhapsody')
opal.tables(opals)
opal.tables(opals, 'rhapsody')
dssShowFactors('lb')
dssSubset('hba', 'lb', row.filter = "LBTESTCD=='HBA1C'")
dssShowFactors('hba')
pkgload::load_all('/media/sf_shareddisk/datashield/dsSwissKnifeClient')
pkgload::load_all('/media/sf_shareddisk/datashield/dsHelpersClient')
library(dsBaseClient)
library(magrittr)
library(reshape2)
library(ggplot2)
library(scales)
source('./cluster_functions.R')
cohorts <- c(  'abose')
cohorts <- c(  'abos')
logindata <- read.delim('logindata_DSOpal.txt')
logindata <- logindata[logindata$server %in% cohorts,,drop=FALSE]
opals <- datashield.login(logindata)
#datashield.aggregate(opals, quote(set.stringsAsFactors(TRUE)))
datashield.assign(opals, 'lb', 'rhapsody.LB')
dssSubset('hba', 'lb', row.filter = "LBTESTCD=='HBA1C'")
dssShowFactors('hba')
this.cohort <- 'abos'
lb_filter_suffix <- "c('CPEPTIDE','HDL')"
dssShowFactors('lb')
dssSubsetByClass('hba', 'hba_vis', 'hba$VISIT')
ds.summary('hba_vis')
ds.summary('hba_vis$BASELINE')
ds.summary('hba_vis$VISIT1')
ds.summary('hba_vis$VISIT2')
dssIsUnique('hba_vis$BASELINE$SUBJID')
dssSubset('hdl', 'lb', row.filter = "LBTESTCD=='HDL'")
dssShowFactors('hdl')
dssSubsetByClass('hdl', 'hdl_vis', 'hdl$VISIT')
ds.summary('hdl_vis$BASELINE')
dssIsUnique('hdl_vis$BASELINE$SUBJID')
dssSubset('cpep', 'lb', row.filter = "LBTESTCD=='CPEPTIDE'")
dssShowFactors('cpep')
dssSubsetByClass('cpep', 'cpep_vis', 'cpep$VISIT')
ds.summary('cpep_vis$BASELINE')
dssIsUnique('cpep_vis$BASELINE$SUBJID') ## yess
dssSubset('cpep_0', 'cpep_vis$BASELINE', row.filter = 'LBTPT =  "0 min"')
ds.summary('cpep_0')
dssSubset('cpep_0', 'cpep_vis$BASELINE', row.filter = 'LBTPT =  "120 min"', async = FALSE)
ds.summary('cpep_0')
dssSubset('cpep_0', 'cpep_vis$BASELINE', row.filter = 'LBTPT ==  "0 min"', async = FALSE)
ds.summary('cpep_0')
dssIsUnique('cpep_0$SUBJID')
with.hdl = TRUE
if(with.hdl){
rowfilter_acc <- "LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL'"
} else {
rowfilter_acc <- "LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') "
}
if(with.hdl){
rowfilter_abos <- "LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL'"
} else {
rowfilter_abos <- "LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') "
}
this.cohort <- 'abos'
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
available_tests
if(with.hdl){
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL') & VISIT == 'BASELINE'"
} else {
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min')) & VISIT == 'BASELINE' "
}
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
dssIsUnique('by_test$CPEPTIDE$SUBJID')
dssIsUnique('by_test$HDL$SUBJID')
dssIsUnique('by_test$HBA1C$SUBJID')
paste(aavailable_tests)
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
paste(aavailable_tests)
paste(available_tests)
paste(available_tests, collapse = '')
paste('by_test$', available_tests)
paste('by_test$', available_tests, collapse = '')
paste('by_test$', available_tests, sep  = '')
join_source = paste('by_test$', available_tests, sep  = '')
dssJoin(join_source, 'comp_lb', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
datashield.errors()
dssShowFactors('by_test$CPEPTIDE')
datashield.logout(opals)
pkgload::load_all('/media/sf_shareddisk/datashield/dsSwissKnifeClient')
pkgload::load_all('/media/sf_shareddisk/datashield/dsHelpersClient')
library(dsBaseClient)
library(magrittr)
library(reshape2)
library(ggplot2)
library(scales)
source('./cluster_functions.R')
cohorts <- c(  'abos')
logindata <- read.delim('logindata_DSOpal.txt')
logindata <- logindata[logindata$server %in% cohorts,,drop=FALSE]
opals <- datashield.login(logindata)
y <- datashield.aggregate(opals, quote(selfUpgrade('dsHelpers',NULL,NULL ,TRUE)), async =FALSE)
datashield.logout(opals)
opals <- datashield.login(logindata)
#datashield.aggregate(opals, quote(set.stringsAsFactors(TRUE)))
datashield.assign(opals, 'lb', 'rhapsody.LB')
this.cohort <- 'abos'
if(with.hdl){
lb_filter_suffix <- "c('CPEPTIDE','HDL')"
} else {
lb_filter_suffix <-  "c('CPEPTIDE')"
}
if(with.hdl){
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL') & VISIT == 'BASELINE'"
} else {
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min')) & VISIT == 'BASELINE' "
}
### LB
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, async = FALSE, datasources = opals[this.cohort] )
with.hdl = TRUE
this.cohort <- 'abos'
if(with.hdl){
lb_filter_suffix <- "c('CPEPTIDE','HDL')"
} else {
lb_filter_suffix <-  "c('CPEPTIDE')"
}
if(with.hdl){
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL') & VISIT == 'BASELINE'"
} else {
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min')) & VISIT == 'BASELINE' "
}
### LB
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
join_source = paste('by_test$', available_tests, sep  = '')
dssShowFactors('by_test$CPEPTIDE')
dssJoin(join_source, 'comp_lb', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
datashield.errors()
join_source
available_tests
datashield.logout(opals)
pkgload::load_all('/media/sf_shareddisk/datashield/dsSwissKnifeClient')
pkgload::load_all('/media/sf_shareddisk/datashield/dsHelpersClient')
library(dsBaseClient)
library(magrittr)
library(reshape2)
library(ggplot2)
library(scales)
source('./cluster_functions.R')
cohorts <- c(  'abos')
logindata <- read.delim('logindata_DSOpal.txt')
logindata <- logindata[logindata$server %in% cohorts,,drop=FALSE]
opals <- datashield.login(logindata)
y <- datashield.aggregate(opals, quote(selfUpgrade('dsHelpers',NULL,NULL ,TRUE)), async =FALSE)
datashield.logout(opals)
opals <- datashield.login(logindata)
#datashield.aggregate(opals, quote(set.stringsAsFactors(TRUE)))
datashield.assign(opals, 'lb', 'rhapsody.LB')
prepare_cluster_abos <- function(with.hdl = TRUE){
this.cohort <- 'abos'
if(with.hdl){
lb_filter_suffix <- "c('CPEPTIDE','HDL')"
} else {
lb_filter_suffix <-  "c('CPEPTIDE')"
}
#  dssShowFactors('lb')
#  dssSubset('hba', 'lb', row.filter = "LBTESTCD=='HBA1C'")
#  dssShowFactors('hba')
#  dssSubsetByClass('hba', 'hba_vis', 'hba$VISIT')
#  ds.summary('hba_vis$BASELINE')
#  dssIsUnique('hba_vis$BASELINE$SUBJID') ## YESSS
#  dssSubset('hdl', 'lb', row.filter = "LBTESTCD=='HDL'")
#  dssShowFactors('hdl')
#  dssSubsetByClass('hdl', 'hdl_vis', 'hdl$VISIT')
#  ds.summary('hdl_vis$BASELINE')
#  dssIsUnique('hdl_vis$BASELINE$SUBJID') ## yess
#  dssSubset('cpep', 'lb', row.filter = "LBTESTCD=='CPEPTIDE'")
#  dssShowFactors('cpep')
#
#  dssSubsetByClass('cpep', 'cpep_vis', 'cpep$VISIT')
#  ds.summary('cpep_vis$BASELINE')
#  dssSubset('cpep_0', 'cpep_vis$BASELINE', row.filter = 'LBTPT ==  "0 min"', async = FALSE)
#  ds.summary('cpep_0')
#  dssIsUnique('cpep_0$SUBJID') #yes
if(with.hdl){
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL') & VISIT == 'BASELINE'"
} else {
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min')) & VISIT == 'BASELINE' "
}
### LB
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
join_source = paste('by_test$', available_tests, sep  = '')
dssShowFactors('by_test$CPEPTIDE')
dssJoin(join_source, 'comp_lb', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
#VS2
dssSubset('vs2', 'vs', row.filter = "VSTESTCD == 'BMI'" , col.filter = "c('SUBJID', 'VSORRES', 'VSDTC')", async = FALSE, datasources = opals[this.cohort])
dssSubset('vs2', 'vs2', row.filter = '!is.na(VSORRES)', async = FALSE, datasources = opals[this.cohort])
ordered_name <- 'by_test_BMI'
out_name <- paste0('BMI_around_diag')
dssSubset(ordered_name, 'vs2', row.filter = 'order(SUBJID)', async = FALSE, datasources = opals[this.cohort])
row_filter_block <- paste0('{
Reduce(c,lapply(unique(SUBJID), function(my_id){
my_dates <- ', ordered_name,  '[', ordered_name, '$SUBJID == my_id, "VSDTC"];
my_dates <- as.Date(as.vector(my_dates));
diag_date <- mh2[mh2$SUBJID == my_id, "MHDTC"];
diag_date <- as.Date(as.vector(diag_date));
if(length(diag_date) == 0 || is.na(diag_date)){
out <- c(TRUE, rep(FALSE, length(my_dates) - 1))
} else {
out <- (my_dates == my_dates[which.min(abs(my_dates - diag_date))]);
}
return(out)
}))
}')
dssSubset(out_name, ordered_name, row.filter = row_filter_block, col.filter = 'c("SUBJID","VSORRES")', async = FALSE, datasources = opals[this.cohort])
dssSubset('comp_vs', out_name, row.filter = paste0('complete.cases(',out_name,')'), async = FALSE, datasources = opals[this.cohort])
dssSubset('comp_vs', 'comp_vs', row.filter ='SUBJID %in% comp_lb$SUBJID', async = FALSE, datasources = opals[this.cohort])
dssSubset('comp_vs', 'comp_vs', row.filter = '!duplicated(SUBJID)', async = FALSE, datasources = opals[this.cohort])
dssColNames('comp_vs', value = c('SUBJID', 'BMI'), async = FALSE, datasources = opals[this.cohort])
#DM
dssSubset('dm2', 'dm', col.filter = "c('SUBJID', 'AGE', 'SEX')", async = FALSE, datasources = opals[this.cohort])
dssSubset('comp_dm', 'dm2', row.filter = "SUBJID %in% comp_vs$SUBJID", async = FALSE, datasources = opals[this.cohort])
# join
dssJoin(c('comp_lb', 'comp_vs', 'comp_dm'), 'join_all', by = 'SUBJID', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
dssSubset('kmeans_input', 'join_all', col.filter = '!(colnames(join_all) %in% c("SUBJID", "SEX"))', async = FALSE, datasources = opals[this.cohort])
#  dssSubsetByClass('join_all', subsets = 'kmeans_by_sex', variables = 'join_all$SEX', keep.cols = eval(parse(text = needed_cols)), async = FALSE, datasources = opals[this.cohort])
#  dssSubset('kmeans_M', 'kmeans_by_sex$M', row.filter = '1==1', async = FALSE, datasources = opals[this.cohort])
#  dssSubset('kmeans_F', 'kmeans_by_sex$F', row.filter = '1==1', async = FALSE, datasources = opals[this.cohort])
vars <- sapply(ds.colnames('kmeans_input', datasources = opals[this.cohort])[[this.cohort]], function(x){
this.col <- paste0('kmeans_input$',x)
ds.var(this.col, datasources = opals[this.cohort])
}, simplify = FALSE)
fivesds <- sapply(vars, function(x){
5*sqrt(x$Variance.by.Study[1,1])
#x$Variance.by.Study[1,1]
}, simplify = FALSE) %>% unlist
colm <- dssColMeans('kmeans_input', datasources = opals[this.cohort])[[this.cohort]]$means
names(fivesds) <- names(colm)
sapply(names(colm), function(x){
maxx <- colm[x] + fivesds[x]
minx <- colm[x] - fivesds[x]
my.filter <- paste0(x, ' > ', minx, ' & ', x, ' < ', maxx)
print(my.filter)
dssSubset('kmeans_input', 'kmeans_input', row.filter = my.filter, async = FALSE, datasources = opals[this.cohort])
})
}
with.hdl = TRUE
this.cohort <- 'abos'
if(with.hdl){
lb_filter_suffix <- "c('CPEPTIDE','HDL')"
} else {
lb_filter_suffix <-  "c('CPEPTIDE')"
}
if(with.hdl){
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL') & VISIT == 'BASELINE'"
} else {
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min')) & VISIT == 'BASELINE' "
}
### LB
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
join_source = paste('by_test$', available_tests, sep  = '')
dssShowFactors('by_test$CPEPTIDE')
dssJoin(join_source, 'comp_lb', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
datashield.errors()
datashield.logout(opals)
pkgload::load_all('/media/sf_shareddisk/datashield/dsSwissKnifeClient')
pkgload::load_all('/media/sf_shareddisk/datashield/dsHelpersClient')
library(dsBaseClient)
library(magrittr)
library(reshape2)
library(ggplot2)
library(scales)
source('./cluster_functions.R')
cohorts <- c(  'abos')
logindata <- read.delim('logindata_DSOpal.txt')
logindata <- logindata[logindata$server %in% cohorts,,drop=FALSE]
opals <- datashield.login(logindata)
#datashield.aggregate(opals, quote(set.stringsAsFactors(TRUE)))
datashield.assign(opals, 'lb', 'rhapsody.LB')
y <- datashield.aggregate(opals, quote(selfUpgrade(NULL,NULL,NULL ,TRUE)), async =FALSE)
datashield.logout(opals)
opals <- datashield.login(logindata)
#datashield.aggregate(opals, quote(set.stringsAsFactors(TRUE)))
datashield.assign(opals, 'lb', 'rhapsody.LB')
with.hdl = TRUE
this.cohort <- 'abos'
if(with.hdl){
lb_filter_suffix <- "c('CPEPTIDE','HDL')"
} else {
lb_filter_suffix <-  "c('CPEPTIDE')"
}
if(with.hdl){
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min') | LBTESTCD == 'HDL') & VISIT == 'BASELINE'"
} else {
rowfilter_abos <- "(LBTESTCD=='HBA1C' | (LBTESTCD == 'CPEPTIDE' & LBTPT ==  '0 min')) & VISIT == 'BASELINE' "
}
### LB
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
join_source = paste('by_test$', available_tests, sep  = '')
dssJoin(join_source, 'comp_lb', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
ds.summary('comp_lb')
### LB
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, col.filter = c('SUBJID', 'LBORRES', 'LBTESTCD'),  async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
datashield.errors(opals)
datashield.errors()
### LB
dssSubset('lb2', 'lb', row.filter = rowfilter_abos, col.filter = "c('SUBJID', 'LBORRES', 'LBTESTCD')",  async = FALSE, datasources = opals[this.cohort] )
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
sapply(available_tests, function(x){
dssColNames(paste0('by_test$', x), c("SUBJID",x ))
})
dssSubsetByClass('lb2', subsets = 'by_test', variables = 'lb2$LBTESTCD', async = FALSE, datasources = opals[this.cohort])
available_tests <- ds.names('by_test', datasources = opals[this.cohort])[[this.cohort]]
join_source = paste('by_test$', available_tests, sep  = '')
sapply(available_tests, function(x){
dssColNames(paste0('by_test$', x), c("SUBJID",x , "LBTESTCD"), datasources = opals[this.cohort])
})
dssShowFactors('by_test$CPEPTIDE')
dssJoin(join_source, 'comp_lb', join.type = 'inner', async = FALSE, datasources = opals[this.cohort])
ds.summary('comp_lb')
dssSubset('comp_lb', 'comp_lb', col.filter = "c('SUBJID', 'CPEPTIDE', 'HBA1C', 'HDL')")
ds.summary('comp_lb')
datashield.logout(opals)
logindata <- read.delim('logindata_DSOpal.txt')
opals <- datashield.login(logindata)
y <- datashield.aggregate(opals, quote(selfUpgrade(NULL,NULL,NULL ,TRUE)), async =FALSE)
datashield.logout(opals)
